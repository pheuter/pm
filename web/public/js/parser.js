parser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_program(context) {
        var cacheKey = "program" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_expr(context);
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_expr(context);
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr(context) {
        var cacheKey = "expr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result10 = parse_definition(context);
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var result9 = parse_Number(context);
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var result8 = parse_String(context);
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var result7 = parse_Array(context);
              if (result7 !== null) {
                var result0 = result7;
              } else {
                var result6 = parse_Quote(context);
                if (result6 !== null) {
                  var result0 = result6;
                } else {
                  var result5 = parse_Word(context);
                  if (result5 !== null) {
                    var result0 = result5;
                  } else {
                    if (input.substr(pos, 1) === " ") {
                      var result4 = " ";
                      pos += 1;
                    } else {
                      var result4 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(" "));
                      }
                    }
                    if (result4 !== null) {
                      var result2 = result4;
                    } else {
                      if (input.substr(pos, 1) === "\n") {
                        var result3 = "\n";
                        pos += 1;
                      } else {
                        var result3 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("\n"));
                        }
                      }
                      if (result3 !== null) {
                        var result2 = result3;
                      } else {
                        var result2 = null;;
                      };
                    }
                    var result1 = result2 !== null
                      ? (function() { return {type: "WS"};})()
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_definition(context) {
        var cacheKey = "definition" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ":") {
          var result2 = ":";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(":"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos, 1) === " ") {
            var result13 = " ";
            pos += 1;
          } else {
            var result13 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(" "));
            }
          }
          while (result13 !== null) {
            result3.push(result13);
            if (input.substr(pos, 1) === " ") {
              var result13 = " ";
              pos += 1;
            } else {
              var result13 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" "));
              }
            }
          }
          if (result3 !== null) {
            var result4 = parse_Word(context);
            if (result4 !== null) {
              var result5 = [];
              if (input.substr(pos, 1) === " ") {
                var result12 = " ";
                pos += 1;
              } else {
                var result12 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(" "));
                }
              }
              while (result12 !== null) {
                result5.push(result12);
                if (input.substr(pos, 1) === " ") {
                  var result12 = " ";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString(" "));
                  }
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "|") {
                  var result6 = "|";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("|"));
                  }
                }
                if (result6 !== null) {
                  var result7 = [];
                  if (input.substr(pos, 1) === " ") {
                    var result11 = " ";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString(" "));
                    }
                  }
                  while (result11 !== null) {
                    result7.push(result11);
                    if (input.substr(pos, 1) === " ") {
                      var result11 = " ";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(" "));
                      }
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result10 = parse_expr(context);
                    while (result10 !== null) {
                      result8.push(result10);
                      var result10 = parse_expr(context);
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === ";") {
                        var result9 = ";";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(";"));
                        }
                      }
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(w, b) { return {type: "DEFINITION", word: w, body: b};})(result1[2], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number(context) {
        var cacheKey = "Number" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result15 = "-";
          pos += 1;
        } else {
          var result15 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        var result2 = result15 !== null ? result15 : '';
        if (result2 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result14 = input.charAt(pos);
            pos++;
          } else {
            var result14 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result14 !== null) {
            var result3 = [];
            while (result14 !== null) {
              result3.push(result14);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ".") {
              var result11 = ".";
              pos += 1;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result11 !== null) {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result13 = input.charAt(pos);
                pos++;
              } else {
                var result13 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result13 !== null) {
                var result12 = [];
                while (result13 !== null) {
                  result12.push(result13);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result13 = input.charAt(pos);
                    pos++;
                  } else {
                    var result13 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                var result12 = null;
              }
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos2;
              }
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            var result4 = result10 !== null ? result10 : '';
            if (result4 !== null) {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "e") {
                var result7 = "e";
                pos += 1;
              } else {
                var result7 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("e"));
                }
              }
              if (result7 !== null) {
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
                if (result9 !== null) {
                  var result8 = [];
                  while (result9 !== null) {
                    result8.push(result9);
                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                      var result9 = input.charAt(pos);
                      pos++;
                    } else {
                      var result9 = null;
                      if (context.reportMatchFailures) {
                        matchFailed("[0-9]");
                      }
                    }
                  }
                } else {
                  var result8 = null;
                }
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(digits) { return { type: "NUMBER", show: parseFloat(digits.join("").replace(/,/g,"")), value: parseFloat(digits.join("").replace(/,/g,"")) }; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_String(context) {
        var cacheKey = "String" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[^"\n]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"\\n]");
            }
          }
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              if (input.substr(pos).match(/^[^"\n]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^\"\\n]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(str) { return {type:"STRING", show: "\""+str.join("")+"\"",value:str.join("")}; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Array(context) {
        var cacheKey = "Array" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("{"));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result8 = [];
          if (input.substr(pos, 1) === " ") {
            var result10 = " ";
            pos += 1;
          } else {
            var result10 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(" "));
            }
          }
          while (result10 !== null) {
            result8.push(result10);
            if (input.substr(pos, 1) === " ") {
              var result10 = " ";
              pos += 1;
            } else {
              var result10 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" "));
              }
            }
          }
          if (result8 !== null) {
            var result9 = parse_expr(context);
            if (result9 !== null) {
              var result7 = [result8, result9];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          while (result7 !== null) {
            result3.push(result7);
            var savedPos1 = pos;
            var result8 = [];
            if (input.substr(pos, 1) === " ") {
              var result10 = " ";
              pos += 1;
            } else {
              var result10 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" "));
              }
            }
            while (result10 !== null) {
              result8.push(result10);
              if (input.substr(pos, 1) === " ") {
                var result10 = " ";
                pos += 1;
              } else {
                var result10 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(" "));
                }
              }
            }
            if (result8 !== null) {
              var result9 = parse_expr(context);
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos, 1) === " ") {
              var result6 = " ";
              pos += 1;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" "));
              }
            }
            while (result6 !== null) {
              result4.push(result6);
              if (input.substr(pos, 1) === " ") {
                var result6 = " ";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(" "));
                }
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "}") {
                var result5 = "}";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("}"));
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(items) { var i = []; var s = []; items.forEach(function (v) {v.forEach(function (val) { if(val.type) { i.push({type: val.type, show: val.show, value: val.value}); s.push(val.show);}});}); return {type:"ARRAY", show: "{"+s.join(' ')+"}",value:i};})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Quote(context) {
        var cacheKey = "Quote" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result2 = "[";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result5 = parse_expr(context);
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_expr(context);
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result4 = "]";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("]"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) { var s = []; e.forEach(function (v) {if(v.type) {s.push(v.show)}}); return {type: "QUOTE", show: "["+s.join(' ')+"]", value:e}; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Word(context) {
        var cacheKey = "Word" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (context.reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result14 !== null) {
          var result2 = result14;
        } else {
          if (input.substr(pos, 1) === "+") {
            var result13 = "+";
            pos += 1;
          } else {
            var result13 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("+"));
            }
          }
          if (result13 !== null) {
            var result2 = result13;
          } else {
            if (input.substr(pos, 1) === "-") {
              var result12 = "-";
              pos += 1;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("-"));
              }
            }
            if (result12 !== null) {
              var result2 = result12;
            } else {
              if (input.substr(pos, 1) === "*") {
                var result11 = "*";
                pos += 1;
              } else {
                var result11 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("*"));
                }
              }
              if (result11 !== null) {
                var result2 = result11;
              } else {
                if (input.substr(pos, 1) === "/") {
                  var result10 = "/";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("/"));
                  }
                }
                if (result10 !== null) {
                  var result2 = result10;
                } else {
                  if (input.substr(pos, 1) === "^") {
                    var result9 = "^";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("^"));
                    }
                  }
                  if (result9 !== null) {
                    var result2 = result9;
                  } else {
                    if (input.substr(pos, 1) === "<") {
                      var result8 = "<";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("<"));
                      }
                    }
                    if (result8 !== null) {
                      var result2 = result8;
                    } else {
                      if (input.substr(pos, 1) === ">") {
                        var result7 = ">";
                        pos += 1;
                      } else {
                        var result7 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(">"));
                        }
                      }
                      if (result7 !== null) {
                        var result2 = result7;
                      } else {
                        if (input.substr(pos, 2) === "<=") {
                          var result6 = "<=";
                          pos += 2;
                        } else {
                          var result6 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("<="));
                          }
                        }
                        if (result6 !== null) {
                          var result2 = result6;
                        } else {
                          if (input.substr(pos, 2) === ">=") {
                            var result5 = ">=";
                            pos += 2;
                          } else {
                            var result5 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(">="));
                            }
                          }
                          if (result5 !== null) {
                            var result2 = result5;
                          } else {
                            if (input.substr(pos, 1) === "=") {
                              var result4 = "=";
                              pos += 1;
                            } else {
                              var result4 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("="));
                              }
                            }
                            if (result4 !== null) {
                              var result2 = result4;
                            } else {
                              if (input.substr(pos, 1) === ".") {
                                var result3 = ".";
                                pos += 1;
                              } else {
                                var result3 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("."));
                                }
                              }
                              if (result3 !== null) {
                                var result2 = result3;
                              } else {
                                var result2 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (context.reportMatchFailures) {
                matchFailed("[a-zA-Z]");
              }
            }
            if (result14 !== null) {
              var result2 = result14;
            } else {
              if (input.substr(pos, 1) === "+") {
                var result13 = "+";
                pos += 1;
              } else {
                var result13 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("+"));
                }
              }
              if (result13 !== null) {
                var result2 = result13;
              } else {
                if (input.substr(pos, 1) === "-") {
                  var result12 = "-";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("-"));
                  }
                }
                if (result12 !== null) {
                  var result2 = result12;
                } else {
                  if (input.substr(pos, 1) === "*") {
                    var result11 = "*";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("*"));
                    }
                  }
                  if (result11 !== null) {
                    var result2 = result11;
                  } else {
                    if (input.substr(pos, 1) === "/") {
                      var result10 = "/";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("/"));
                      }
                    }
                    if (result10 !== null) {
                      var result2 = result10;
                    } else {
                      if (input.substr(pos, 1) === "^") {
                        var result9 = "^";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("^"));
                        }
                      }
                      if (result9 !== null) {
                        var result2 = result9;
                      } else {
                        if (input.substr(pos, 1) === "<") {
                          var result8 = "<";
                          pos += 1;
                        } else {
                          var result8 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("<"));
                          }
                        }
                        if (result8 !== null) {
                          var result2 = result8;
                        } else {
                          if (input.substr(pos, 1) === ">") {
                            var result7 = ">";
                            pos += 1;
                          } else {
                            var result7 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(">"));
                            }
                          }
                          if (result7 !== null) {
                            var result2 = result7;
                          } else {
                            if (input.substr(pos, 2) === "<=") {
                              var result6 = "<=";
                              pos += 2;
                            } else {
                              var result6 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("<="));
                              }
                            }
                            if (result6 !== null) {
                              var result2 = result6;
                            } else {
                              if (input.substr(pos, 2) === ">=") {
                                var result5 = ">=";
                                pos += 2;
                              } else {
                                var result5 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString(">="));
                                }
                              }
                              if (result5 !== null) {
                                var result2 = result5;
                              } else {
                                if (input.substr(pos, 1) === "=") {
                                  var result4 = "=";
                                  pos += 1;
                                } else {
                                  var result4 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("="));
                                  }
                                }
                                if (result4 !== null) {
                                  var result2 = result4;
                                } else {
                                  if (input.substr(pos, 1) === ".") {
                                    var result3 = ".";
                                    pos += 1;
                                  } else {
                                    var result3 = null;
                                    if (context.reportMatchFailures) {
                                      matchFailed(quoteString("."));
                                    }
                                  }
                                  if (result3 !== null) {
                                    var result2 = result3;
                                  } else {
                                    var result2 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(t) { return {type: "WORD", show: t.join(""),value: t.join('')};})(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_program({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();